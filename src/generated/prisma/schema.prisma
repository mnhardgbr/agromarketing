// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  name             String
  email            String         @unique
  emailVerified    DateTime?
  image            String?
  password         String
  phone            String?
  cpf              String?        @unique
  address          String?
  city             String?
  state            String?
  zipCode          String?
  role             Role           @default(USER)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  listings         Listing[]
  conversations    Conversation[]
  sentMessages     ChatMessage[]  @relation("SentMessages")
  receivedMessages ChatMessage[]  @relation("ReceivedMessages")
  notifications    Notification[]
  reviews          Review[]
  accounts         Account[]
  sessions         Session[]
  animals          Animal[]
  cart             Cart?
  orders           Order[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Listing {
  id                String         @id @default(cuid())
  title             String
  description       String
  category          String
  breed             String
  age               String
  weight            Float
  price             Float
  location          String
  veterinaryHistory String?
  status            String         @default("ACTIVE")
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  userId            String
  user              User           @relation(fields: [userId], references: [id])
  images            ListingImage[]
  conversations     Conversation[]
  reviews           Review[]
  cartItems         CartItem[]
  orderItems        OrderItem[]
}

model ListingImage {
  id        String   @id @default(cuid())
  url       String
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Conversation {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  listingId String
  listing   Listing       @relation(fields: [listingId], references: [id])
  users     User[]
  messages  ChatMessage[]
}

model ChatMessage {
  id             String       @id @default(cuid())
  content        String
  read           Boolean      @default(false)
  createdAt      DateTime     @default(now())
  senderId       String
  receiverId     String
  conversationId String
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  userId    String
  listingId String
  user      User     @relation(fields: [userId], references: [id])
  listing   Listing  @relation(fields: [listingId], references: [id])
}

model Animal {
  id          String   @id @default(cuid())
  name        String
  species     String
  breed       String
  age         Int
  weight      Float
  price       Float
  description String
  location    String
  images      String[]
  status      Status   @default(ACTIVE)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([userId])
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, listingId])
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  SOLD
  INACTIVE
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
  status          OrderStatus @default(PENDING)
  totalAmount     Float
  shippingAddress String
  shippingCity    String
  shippingState   String
  shippingZipCode String
  paymentId       String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([userId])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orderId, listingId])
}
